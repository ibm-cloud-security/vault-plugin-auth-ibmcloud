// Code generated by MockGen. DO NOT EDIT.
// Source: iam_helper.go

// Package ibmcloudauth is a generated GoMock package.
package ibmcloudauth

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	logical "github.com/hashicorp/vault/sdk/logical"
	reflect "reflect"
)

// MockiamHelper is a mock of iamHelper interface
type MockiamHelper struct {
	ctrl     *gomock.Controller
	recorder *MockiamHelperMockRecorder
}

// MockiamHelperMockRecorder is the mock recorder for MockiamHelper
type MockiamHelperMockRecorder struct {
	mock *MockiamHelper
}

// NewMockiamHelper creates a new mock instance
func NewMockiamHelper(ctrl *gomock.Controller) *MockiamHelper {
	mock := &MockiamHelper{ctrl: ctrl}
	mock.recorder = &MockiamHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockiamHelper) EXPECT() *MockiamHelperMockRecorder {
	return m.recorder
}

// ObtainToken mocks base method
func (m *MockiamHelper) ObtainToken(apiKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObtainToken", apiKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObtainToken indicates an expected call of ObtainToken
func (mr *MockiamHelperMockRecorder) ObtainToken(apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObtainToken", reflect.TypeOf((*MockiamHelper)(nil).ObtainToken), apiKey)
}

// VerifyToken mocks base method
func (m *MockiamHelper) VerifyToken(ctx context.Context, token string) (*tokenInfo, *logical.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(*tokenInfo)
	ret1, _ := ret[1].(*logical.Response)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken
func (mr *MockiamHelperMockRecorder) VerifyToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockiamHelper)(nil).VerifyToken), ctx, token)
}

// CheckServiceIDAccount mocks base method
func (m *MockiamHelper) CheckServiceIDAccount(iamToken, identifier, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceIDAccount", iamToken, identifier, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckServiceIDAccount indicates an expected call of CheckServiceIDAccount
func (mr *MockiamHelperMockRecorder) CheckServiceIDAccount(iamToken, identifier, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceIDAccount", reflect.TypeOf((*MockiamHelper)(nil).CheckServiceIDAccount), iamToken, identifier, accountID)
}

// CheckUserIDAccount mocks base method
func (m *MockiamHelper) CheckUserIDAccount(iamToken, iamID, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIDAccount", iamToken, iamID, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUserIDAccount indicates an expected call of CheckUserIDAccount
func (mr *MockiamHelperMockRecorder) CheckUserIDAccount(iamToken, iamID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIDAccount", reflect.TypeOf((*MockiamHelper)(nil).CheckUserIDAccount), iamToken, iamID, accountID)
}

// CheckGroupMembership mocks base method
func (m *MockiamHelper) CheckGroupMembership(groupID, iamID, iamToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGroupMembership", groupID, iamID, iamToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckGroupMembership indicates an expected call of CheckGroupMembership
func (mr *MockiamHelperMockRecorder) CheckGroupMembership(groupID, iamID, iamToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGroupMembership", reflect.TypeOf((*MockiamHelper)(nil).CheckGroupMembership), groupID, iamID, iamToken)
}

// Init mocks base method
func (m *MockiamHelper) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init
func (mr *MockiamHelperMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockiamHelper)(nil).Init))
}

// Cleanup mocks base method
func (m *MockiamHelper) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup
func (mr *MockiamHelperMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockiamHelper)(nil).Cleanup))
}
